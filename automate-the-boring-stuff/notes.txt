#https://automatetheboringstuff.com/


Python Basics               https://automatetheboringstuff.com/3e/chapter1.html
        1.  programming language (with syntax rules for writing what is considered valid python code)
        2.  interpreter software that reads the source code and perform its instructions
    ENTERING EXPRESSIONS INTO THE INTERACTIVE SHELL
        >>> 2+2,    2+2 is an example of an expression, a kind of programming instruction in the language             
        4,          evaluate down to a single value
    INTEGER, FLOATING-POINT AND STRING DATA TYPES
        integer values, whole numbers
        floating point numbers or floats, number with decimals
        string values, text values enclosed with quotes ''  / ""
    STRING CONCATENATION AND REPLICATION
        string concatenation, joining strings using + operator 
                >>>'alice' + 'box'
                alicebob
            -   the expression evaluates down to a single value
        string replication, using * operator to repeat a string by an int value 
            >>> 'alice'*5
            'alicealicealicealicealice'
    STORING VALUES IN VARIABLES 
        a box of computer memory, where you can store a single value 
    ASSIGNMENT STATEMENTS 
        assignment statement, using '=' operator 
            >>> a = 100 
            >>> a 
            100
    FIRST PROGRAM 
        # .\python-exercises\first-program.py
    COMMENTS
        start a line using #
        python ignores comments 
        programmers use them to write notes / 
        used to remind yourself what the code is trying to do
    print() FUNCTION 
        display the string value inside its parentheses on the screen
            >>>print('Hello, world!')
            Hello, world!
    input() FUNCTION 
        waits for the user to type some text on the keyboard and press ENTER:
            >>>my_name = input('>')
            >gab
            >>>my_name 
            gab
    len() FUNCTION
        number of elements in a value
            example for a string value, 
                >>>name = 'gab'
                >>>len(name)
                3
            in a string value the number of character is evaluated
    THE str() , int() , float() FUNCTIONS
        str() , converts a value to its string equivalent
            >>>str(29)
            '29'
            >>>print('I am'+str()+ ' years old.' )
            I am 29 years old.
        int(), converts a value to its int equivalent 
            >>>int(1.12)
            1
        float(), converts a value to its float equivalent
            >>>float(1)
            1.0
    type() FUNCTION 
        pass a value to type() function will determine what type they are 
            >>> type(42)                                                                           
            <class 'int'>
            >>> type(42.0)
            <class 'float'>
            >>> type('forty two')
            <class 'str'>
            >>> name = 'zophie'
            >>> type(name)
            <class 'str'>
            >>> type(len(name))
            <class 'int'>
    round() FUNCTION 
        round() function, accepts a float and returns  the nearest integer 
            >>> round(3.14)
            3
            >>> round(7.7)
            8
            >>> round(-2.2)
            -2
            >>> 
        round also accepts optional second argument 
            >>> round(3.14,1)
            3.1
            >>> round(7.7777,3)
            7.778
    abs() FUNCTION 
        absolute distance of a value from 0
            >>> abs(25)
            25
            >>> abs(-25)
            25
            >>> abs(-3.14)
            3.14
            >>> abs(0)
            0 
if-else and flow control    https://automatetheboringstuff.com/3e/chapter2.html
        1.  decide which python instructions to execute under which conditions
        2.  ability to skip, repeat, or choose one of several instructions to run
    BOOLEAN VALUES 
        has 2 values, True and False 
            >>> spam = True
            >>> spam
            True
            >>> true
            Traceback (most recent call last):
            File "<python-input-20>", line 1, in <module>
                true
            NameError: name 'true' is not defined. Did you mean: 'True'?
            >>> False = 2+2
            File "<python-input-21>", line 1
                False = 2+2
                ^^^^^
            SyntaxError: cannot assign to False
    COMPARISON OPERATORS 
            == , equal to 
                5 == 5 , evaluates to True 
                4 == 2 + 2 , evaluates to True 
            != , not equal to 
                1 != 2 , evaluates to True 
                'hello' != 'hello' , evaluates to False 
            <, less than 
                10 < 5 , evaluates to False 
                1.999 < 5 , evaluates to True
            >, greater than 
                1+1 > 4 , evaluates to False 
                99 > 4 + 8 , evaluates to True 
            <= less than or equal to 
                4 <= 5 , evaluates to True 
                5 <= 5 , evaluates to True 
            >= greater than or equal to 
                5 >= 4 , evaluates to True 
                5 >= 5 , evaluates to True 
        using in number values 
            >>> 42 == 42
            True
            >>> 42 == 99
            False
            >>> 2 != 3
            True
            >>> 2 != 2
            False   
            >>> 42 == 42.0
            True
            >>> 42 == '42'
            False 
        using in string values 
            >>> 'hello' == 'hello'
            True
            >>> 'hello' == 'hello'
            True
            >>> 'hello' == 'Hello'
            False
            >>> 'dog' != 'cat'
            True
            >>> True == True
            True
            >>> True != False
            True
    BOOLEAN OPERATORS
        all takes two values or expressions and evaluate to a single bool value 
            and , evaluates to True if both are True otherwise False   
                >>> True and True
                True
                >>> True and False
                False
            or , evaluates to True if at least one is True , False if both are False
            not , only takes one bool expression or value , evaluates to negative value 
    COMPONENTS OF FLOW CONTROL 
            condition, decides what to do based on its evaluated value 
            clause, followed by this block of code 
            example 
                username = 'mary'
                password = 'swordfish'
                if username == 'mary':              +--- condition
                    print('hello, mary')            +--- clause
                    if password == 'swordfish':             +---condition
                        print('access granted')             +---clause
                    else:                                   +---condition
                        print('wrong password.')            +---clause
        if 
                +most common type of flow control 
                +clause will execute if the statement's condition is True.
                +clause is skipped if codition is False
            +if this condition is true, execute the code in the clause 
            + 
                -   The if keyword 
                -   A condition (that is, an expression that evaluates to True or False)
                -   A colon 
                -   an indented block of code, called an if clause or if block 
            +example 
                name = 'alice'
                if name == 'alice':
                    print('Hi, Alice.')
        else
            + an else clause is executed only when the if statement's condition is False.
                + the else keyword
                + a colon 
                + indented block of code 
            + example 
                name = 'Alice'
                if name == 'Alice':
                    print('Hi, Alice.')
                else:
                    print('Hello, stranger.')    
        elif 
            + if one of many possible clauses to execute 
            + provides another condition that is checked only 
                if all the previous conditions were False 
            + 
                +   The elif keyword
                +   a condition (that is, an expression that evaluates to True or False)
                +   a colon 
                +   an indented block of code 
            + example 
                name = 'alice'
                age = 33 
                if name == 'alice':
                    print('hi, alice.')
                elif age < 12:
                    print('you are not alice, kiddo.')
    A SHORT PROGRAM: OPPOSITE DAY 
        .\python-exercises\opposite-day.py
    A SHORT PROGRAM: DISHONEST CAPACITY CALCULATOR 
        .\python-exercises\dishonest-capacity-calculator.py
Loops                       https://automatetheboringstuff.com/3e/chapter3.html
        +   how to repeatedly execute blocks of code using loops
        +   2 kinds of loops 
            +   while 
            +   for 
    while Loop statements 
        +   structure 
            +   the while keyword 
            +   a condition (that is, an expression that evaluates to True or False)
            +   a colon 
            +   indented block of code , called the while clause or while block 
        +   example 
            an if statement
                spam = 0 
                if spam < 5:
                    print('hello, world.')
                    spam = spam + 1
            a while statement 
                spam = 0 
                while spam < 5:
                    print('hello, world.')
                    spam = spam + 1
        +   break statements 
            +   used to exit the loop
            +   sample
                    while True:
                        print('Please type your name.')
                        name = input('>')
                        if name == 'your name':
                            break
                    print('Thank you!')
        +   continue statements 
            +   used to immediately jump back to the start of the loop 
            +   sample 
                while True:
                    print('Who are you?')
                    name = input('>')
                    if name != 'Joe':
                        continue 
                    print('Hello, Joe. What is the password? (It is a fish.)')
                    password = input('>')
                    if password == 'swordfish':
                        break 
                print('Access granted.')
    for Loops and range() Function 
        +   structure
            +   the for keyword 
            +   a variable name 
            +   the in keyword 
            +   a collection
            +   indented code block called the for clause or for block 
        +   sample 
            print('hello!')
            for i in range(5):
                print('On this iteration, i is set to '+str(i))
            print('Goodbye!')
    A short program: Guess the number 
        .\python-exercises\guess-the-number-while-version.py
        .\python-exercises\guess-the-number-for-version.py
    A short program: Rock, Paper, Scissors 
        .\python-exercises\rock-paper-scissors.py
    Practice quesstions 
        1.  What keys can you press if your Python program is stuck
            in an infinite loop?

            answer:

                    alt + F4
                    ctrl + c 
        2.  What is the difference between break and continue?
            answer:
                break, exits the loop 
                continue, skips the rest of the current iteration and goes to the start of the loop
        3.  What is the difference between range(10), range(0,10), and range(0,10,1) in a for loop?
            answer:
                nothing, in its functionality only in how its written
        4.  Write a short program that prints the number 1 to 10 using a for 
            loop. Then, write an equivalent program that prints the numbers 1 to 10 
            using a while loop.
            answer:
                .\python-exercises\pratice-question-4.py
        5.  If you had a function named bacon() inside a module named spam,
            how would you call it after importing spam?
            answer:
                import spam 
                spam.bacon()
Functions                   https://automatetheboringstuff.com/3e/chapter4.html
    Creating Functions 
        +   sample 
            ----------------------------------------------
            .\python-exercises\hello-function.py
            def hello():
                #print three greetings 
                greetings = [
                    'Good moring!',
                    'Good afternoon!',
                    'Good evening!'
                ]
                for i in greetings: print(i)
            hello()
            hello()
            hello('ONE MORE TIME!')
            hello()
            ----------------------------------------------
    Arguments and Parameters 
        .\python-exercises\hello-funtion2.py
        +   arguments, variable name 
        +   parameters, value you pass to the function
    Return values and return statements 
        +   return value, the value to which a function call evaluates 
        +   return statements, 
            +   the return keyword 
            +   the value or expression that the function should return 
        +   sample 
            -----------------------------------------------------
            .\python-exercises\magic8ball.py
            -----------------------------------------------------
    The None Value 
        +   represents the absence of value, a NoneType data type 
    Named Parameters
        +   sample 
            ---------------------------------------------------
            .\python-exercises\coinflip.py
            ---------------------------------------------------
    The Call Stack 
        +   sample 
            -------------------------------------------------
            .\python-exercises\the-call-stack.py
            -------------------------------------------------
    Local and Global Scopes 
        +   sample 
            ------------------------------------------------
            def spam():
                ❶ eggs = 'sss'
                spam()
                print(eggs)
            Traceback (most recent call last):
                File "C:/test1.py", line 4, in <module>
                print(eggs)
            NameError: name 'eggs' is not defined
            ------------------------------------------------
            def spam():
            ❶ global eggs
            ❷ eggs = 'spam'

            eggs = 'global'
            spam()
            print(eggs)  # Prints 'spam'
            spam
            ------------------------------------------------
    Scope Identification 
        +   sample 
            --------------------------------------------------
            .\python-exercises\same_name_local_global.py
            --------------------------------------------------
    Exception Handling 
        +   the try, except 
        +   sample 
            ----------------------------------------------------
            .\python-exercises\try-except1.py
            ----------------------------------------------------
    A Short Program: Zigzag 
        +   
            ---------------------------------------------------
            .\python-exercises\zigzag.py
            ---------------------------------------------------
    A Short Program: Spike
        +   sample 
            -------------------------------------------------
            .\python-exercises\spike.py
            -------------------------------------------------
    Practice quesstions
        1.  Why are functions advantageous to have in your programs?
            answers:
                Reusability, you can write code once and use it in many places 
                Organization & Readability, break large program into smaller, logical chunks 
                Avoid repeatition, prevent repetitive codes 
                Maintainability, easier to fix bugs or extend functionality 
                Testing & debugging, functions can be tested individually 
                Abstraction, dont need to know how the function works, just what it does 
        2.  When does the code in a function execute: when the function is 
            defined or when the function is called?
            answer:
                the function executes during the call 
        3.  What statement creates a function?
            answer:
                def statement 
        4.  What is the difference between a function and a function call?
            answer:
                function,   is code block you define 
                            function name , parameters, instructions, optional return value 
                            function call, using it or the execution of the function 
        5.  How many global scopes are there in a Python program? How many local scopes are there?
            answer:
                Global scope: exactly one per program.
                Local scope: as many as you create by calling functions.
        6.  What happens to variables in a local scope when the function call returns?
            answer:
                it ceases to exist
        7.  What is a return value? Can a return value be part of an expression?
            answer:
                return value, is the evaluation of a function 
                yes 
        8.  If a function does not have a return statement, what is the return value of 
            a call to that function?
            answer:
                None , the NoneType data type 
        9.  How can you force a variable in a function to refer to the global variable?
            answer:
                using global statement 
        10. What is the data type of None?
            answer:
                NoneType data type
        11. What does the import areallyourpetsnamederic statement do?
            answer:
                you can call the functions, classes and variables inside the module 
                by using the module name followed by '.' then name of that function, class or variable
        12. If you had a function named bacon() in a module named spam, how would you call 
            it after importing spam?
            answer:
                spam.bacon()
        13. How can you prevent a program from crashing when it gets an error? 
            answer:
                using the try except statement
        14. What goes in the try clause? what goes in the except clause?
            answer:
                try clause, code you are trying to run 
                except clause, code that executes when the error is detected 
        15. Write the following program in a file named notrandomdice.py and 
            run it. Why dies each function call return the same number?
            ---------------------------------------------------
                import random
                random_number = random.randint(1, 6)

                def get_random_dice_roll():
                    # Returns a random integer from 1 to 6
                    return random_number

                print(get_random_dice_roll())
                print(get_random_dice_roll())
                print(get_random_dice_roll())
                print(get_random_dice_roll())
            ---------------------------------------------------
            answer:
                random_number = random.randint(1, 6)
                This runs a single time, 
                stores that value in random_number, 
                and every call to get_random_dice_roll() 
                just returns the same stored value.
    Practice Programs 
        .\python-exercises\collatz.py
Debugging                   https://automatetheboringstuff.com/3e/chapter5.html
    Raising Exception
        +   using raise keyword 
        +   a call to the Exception() function 
        +   string , error message passed to the Exception() function 
        +   example 
            >>> raise Exception('This is the error message.')
            Traceback (most recent call last):
                File '<pyshell#191>', line 1, in <module>
                    raise Exception('This is the error message.')
            Exception: This is the error message.
        +   sample usage 
            .\python-exercises\box-print.py
    Assertions 
        +   structure
            +   the assert keyword 
            +   a condition , expression that evaluates to True or False 
            +   a comma
            +   a string to display when the condition is False 
        +   an assert statement, 
            +   asserts that the condition holds true, and 
                if not, there is a bug somewhere, so immediately
                stop the program.
            +   example 1
                interactive shell:
                    >>> ages = [26, 57, 92, 54, 22, 15, 17, 80, 47, 73]
                    >>> ages.sort()
                    >>> ages
                    [15, 17, 22, 26, 47, 54, 57, 73, 80, 92]
                    >>> assert ages[0] <= ages[-1]  # Assert that the first age is <= the last age.
            +   example 2
                interactive shell:
                    >>> ages = [26, 57, 92, 54, 22, 15, 17, 80, 47, 73]
                    >>> ages.reverse()
                    >>> ages
                    [73, 47, 80, 17, 15, 22, 54, 92, 57, 26]
                    >>> assert ages[0] <= ages[-1], 'Assert that the first age is <= the last age.'
    Logging
        +   the logging module
            import Logging 
            loggin.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s - %(message)s')
        +   sample
            .\python-exercises\factorial-log.py
    Debugging an Addition Program 
        .\python-exercises\buggy-adding-program.py
    Practice Program: Debuggin Coin Toss 
        .\python-exercises\coin-toss.py
Lists                       https://automatetheboringstuff.com/3e/chapter6.html
    +   The List Data Type 
        +   a collection of values in an ordered sequence 
        +   sample 
            +   [1,2,3]
            +   ['cat', 'bat', 'rat', 'elephant']
            +   ['hello', 3.1415, True, None, 42]
    +   Indexes 
        +   the ordered placement of an element in a collection 
        +   usually enclosed between brackets , collection[index]
        +   starts at 0 
    +   Negative Indexes 
        +   indexing that starts at the last element of the collection 
    +   Slices  
        +   slice = collection[start:end] , where end is exclusive
    +   Updating values 
        +   collection = [1,2,3,4,5,6]
        +   collection[3] = 1 ,  change element at index 3 to value 1 
        +   [1,2,3,1,5,6] , new values of the collection 
    +   Concatenation and Replication 
        +   [1,2,3] + [4,5,6]
            [1,2,3,4,5,6]
        +   ['x','y','z'] * 3
            ['x','y','z','x','y','z','x','y','z']
    +   del Statements 
        spam = ['cat','bat','rat','elephant']
        del spam[2] , delete element at index 2 
        ['cat','bat','elephant'] , new values of spam 
    +   Working with lists 
        .\python-exercises\all-my-cats1.py 
    +   Enumeration 
        +   returns the index number and the element in a collection 
        +   sample 
            >>> supplies = ['pens','stapler','flamethrowers','binders']
            >>> for index,item in enumerate(supplies): print('Index '+str(index\)+ ' in supplies is: '+item)                                        
            ... 
            Index 0 in supplies is: pens
            Index 1 in supplies is: stapler
            Index 2 in supplies is: flamethrowers
            Index 3 in supplies is: binders
    +   using the random module in a list 
        +   sample , using random.choice
            >>> import random
            >>> pets = ['dog','cat','moose']
            >>> random.choice(pets)
            'moose'
            >>> random.choice(pets)
            'dog'
            >>> random.choice(pets)
            'moose'
        +   sample 1 , using random.shuffle
            >>> import random
            >>> people = ['alice','bob','carol','david']
            >>> random.shuffle(people)
            >>> people
            ['david', 'carol', 'bob', 'alice']
            >>> random.shuffle(people)
            >>> people
            ['david', 'carol', 'alice', 'bob']
            >>> random.shuffle(people)
            >>> people
            ['carol', 'david', 'bob', 'alice']
    +   list methods 
        +   using .index() method, returns the index of the first occurrence of the value passed
            +   sample 
                >>> people
                ['carol', 'david', 'bob', 'alice']
                >>> people.index('bob')
                2
                >>> people.index('alice')
                3
                >>> people.index('alic')
                Traceback (most recent call last):
                File "<python-input-19>", line 1, in <module>
                    people.index('alic')
                    ~~~~~~~~~~~~^^^^^^^^
                ValueError: 'alic' is not in list
        +   using .append() method, adds an element to the end of the list 
            +   sample 
                >>> people
                ['carol', 'david', 'bob', 'alice']
                >>> people.append('gab')
                >>> people
                ['carol', 'david', 'bob', 'alice', 'gab']
                >>> people.append('me')
                >>> people
                ['carol', 'david', 'bob', 'alice', 'gab', 'me']
        +   using .insert() method, adds an element at a given index 
            +   sample 
                >>> people
                ['carol', 'david', 'bob', 'alice']
                >>> people.insert(1,'gab')
                >>> people
                ['carol', 'gab', 'david', 'bob', 'alice']
                >>> people.insert(-1,'me')
                >>> people
                ['carol', 'gab', 'david', 'bob', 'me', 'alice']
        +   using .remove() method, removes the first instance  of the argument passed  in the list
            +   sample
                >>> spam = ['cat','bat','rat','elephant']
                >>> spam.remove('bat')
                >>> spam
                ['cat', 'rat', 'elephant']                                          
                >>> spam.remove('gab')
                Traceback (most recent call last):
                File "<python-input-3>", line 1, in <module>
                    spam.remove('gab')
                    ~~~~~~~~~~~^^^^^^^
                ValueError: list.remove(x): x not in list 
        +   using .sort() method, arranges the element in list numerically or alphabetically
            +   sample 
                >>> spam
                ['cat', 'rat', 'elephant']
                >>> spam.sort()
                >>> spam
                ['cat', 'elephant', 'rat']
                >>> numbers = [3,2,4,6,7,8,1]
                >>> numbers.sort()
                >>> numbers
                [1, 2, 3, 4, 6, 7, 8]
            +   using the reverse parameter,
                >>> numbers
                [1, 2, 3, 4, 6, 7, 8]
                >>> numbers.sort(reverse=True)
                >>> numbers
                [8, 7, 6, 4, 3, 2, 1]
        +   using 